#
# Partner PowerUp BizObs - Clean ACE-BOX Role
#

---
- set_fact:
    role_path_abs: "{{ role_path }}"
    bizobs_repo_url: "https://github.com/lawrobar90/Partner-PowerUp-BizObs-App.git"
    bizobs_app_dir: "/home/{{ ace_box_user | default('dt_training') }}/Partner-PowerUp-BizObs-App"
    bizobs_domain: "bizobs.{{ ingress_domain }}"

- include_role:
    name: dt-access-token
  vars:
    access_token_var_name: "monaco_cleanup_api_token"
    access_token_scope: ["ReadConfig", "WriteConfig", "events.ingest", "settings.read", "settings.write", "metrics.ingest", "openTelemetryTrace.ingest", "logs.ingest"]

- include_role:
    name: "microk8s"

# Install Node.js via ACE-BOX role for startup script compatibility
- name: Install Node.js via ACE-BOX role
  block:
    - include_role:
        name: "nodejs"
      vars:
        nodejs_node_version: "v18.20.1"
  rescue:
    - name: Verify Node.js is available despite YARN failure
      ansible.builtin.shell: |
        . ~/.nvm/nvm.sh && node --version
      args:
        executable: /bin/bash
      become_user: "{{ ace_box_user | default('dt_training') }}"
      register: node_version_result
      
    - name: Log Node.js status
      ansible.builtin.debug:
        msg: "Node.js available: {{ node_version_result.stdout }} (YARN installation failed but not required for BizObs)"

    - name: Ensure Node.js is in PATH for current session
      ansible.builtin.shell: |
        echo 'export PATH="$HOME/.nvm/versions/node/v18.20.1/bin:$PATH"' >> ~/.bashrc
        . ~/.bashrc
      become_user: "{{ ace_box_user | default('dt_training') }}"
      failed_when: false

# Install OneAgent BEFORE app for proper instrumentation
- include_role:
    name: "dt-oneagent-classic"

# Install BizFlow App for Business Observability
- name: Install BizFlow App
  block:
    - include_role:
        name: dt-platform
        tasks_from: ensure-app
      vars:
        dt_app_id: "dynatrace.biz.flow"
        dt_app_version: "1.20.3"
        dt_environment_url_gen3: "{{ extra_vars.dt_environment_url_gen3 }}"
        dt_oauth_sso_endpoint: "{{ extra_vars.dt_oauth_sso_endpoint }}"
        dt_oauth_client_id: "{{ extra_vars.dt_oauth_client_id }}"
        dt_oauth_client_secret: "{{ extra_vars.dt_oauth_client_secret }}"
        dt_oauth_account_urn: "{{ extra_vars.dt_oauth_account_urn }}"
  rescue:
    - name: Log BizFlow installation failure
      ansible.builtin.debug:
        msg: "BizFlow app installation failed, but continuing deployment. Business events can still be configured via Monaco."
      
    - name: Set BizFlow installation status
      set_fact:
        bizflow_installed: false
  always:
    - name: Set BizFlow installation status on success
      set_fact:
        bizflow_installed: true
      when: ansible_failed_result is not defined

# Deploy Monaco configuration BEFORE app starts
- include_role:
    name: "monaco-v2"

- include_role:
    name: monaco-v2
    tasks_from: apply-monaco
    apply:
      environment:
        DT_API_TOKEN: "{{ dynatrace_api_token }}"
        DT_PLATFORM_TENANT_URL: "{{ extra_vars.dt_environment_url_gen3.rstrip('/') }}"
        DT_OAUTH_CLIENT_ID: "{{ extra_vars.dt_oauth_client_id }}"
        DT_OAUTH_CLIENT_SECRET: "{{ extra_vars.dt_oauth_client_secret }}"
        DT_OAUTH_SSO_ENDPOINT: "{{ extra_vars.dt_oauth_sso_endpoint }}"
        INGRESS_DOMAIN: "{{ ingress_domain }}"
  vars:
    monaco_projects_root: "{{ role_path_abs }}/files/monaco"
    monaco_project: "" # selection of projects or all projects under the root path if set empty
    monaco_manifest_path: "{{ role_path_abs }}/files/monaco/manifest.yml"
    monaco_environment:
      DT_API_TOKEN: "{{ dynatrace_api_token }}"
      DT_PLATFORM_TENANT_URL: "{{ extra_vars.dt_environment_url_gen3.rstrip('/') }}"
      DT_OAUTH_CLIENT_ID: "{{ extra_vars.dt_oauth_client_id }}"
      DT_OAUTH_CLIENT_SECRET: "{{ extra_vars.dt_oauth_client_secret }}"
      DT_OAUTH_SSO_ENDPOINT: "{{ extra_vars.dt_oauth_sso_endpoint }}"

- name: Clone repository
  ansible.builtin.git:
    repo: "{{ bizobs_repo_url }}"
    dest: "{{ bizobs_app_dir }}"
    version: "main"
    force: yes
  become_user: "{{ ace_box_user | default('dt_training') }}"

# Use the comprehensive startup script from the app repository
# This avoids duplication and uses the battle-tested 501-line script

- name: Start Partner PowerUp BizObs with existing comprehensive script (async)
  shell: |
    cd {{ bizobs_app_dir }}
    chmod +x start-server.sh
    nohup ./start-server.sh --ace-box-id="{{ ace_box_id | default('ace-box-demo') }}" --external-url="http://{{ bizobs_domain }}" > /tmp/bizobs-startup.log 2>&1 &
    echo "Started BizObs application in background"
  environment:
    ACE_BOX_ID: "{{ ace_box_id | default('ace-box-demo') }}"
    BIZOBS_EXTERNAL_URL: "http://{{ bizobs_domain }}"
    COMPANY_NAME: "{{ company_name | default('Dynatrace') }}"
    COMPANY_DOMAIN: "{{ company_domain | default('dynatrace.com') }}"
    INDUSTRY_TYPE: "{{ industry_type | default('technology') }}"
    EXTERNAL_URL_OVERRIDE: "http://{{ bizobs_domain }}"
  args:
    chdir: "{{ bizobs_app_dir }}"
  become_user: "{{ ace_box_user | default('dt_training') }}"

- name: Wait for startup
  ansible.builtin.wait_for:
    port: 8080
    host: localhost
    timeout: 300
    delay: 30

- name: Check startup log for success
  shell: |
    if [ -f /tmp/bizobs-startup.log ]; then
      tail -50 /tmp/bizobs-startup.log
    else
      echo "Startup log not found"
    fi
  register: startup_log
  
- name: Display startup status
  ansible.builtin.debug:
    msg: "BizObs startup log: {{ startup_log.stdout }}"

- name: Verify application health
  ansible.builtin.uri:
    url: "http://localhost:8080/health"
    method: GET
    status_code: 200
  register: health_check
  retries: 5
  delay: 10
  until: health_check is succeeded

- name: Verify admin services status
  ansible.builtin.uri:
    url: "http://localhost:8080/api/admin/services/status"
    method: GET
    status_code: 200
  register: admin_status
  retries: 3
  delay: 5
  failed_when: false

- name: Log health check results
  ansible.builtin.debug:
    msg: |
      Health Check: {{ health_check.status }}
      Admin Status: {{ admin_status.status | default('Failed') }}
      BizObs Application Ready: {{ health_check is succeeded }}

# Deploy collaboration tools AFTER app is verified working
- include_role:
    name: "mattermost"

# Fix Mattermost ingress configuration for proper public access
- name: Fix Mattermost ingress service name and configuration
  block:
    - name: Update Mattermost ingress to point to correct service
      kubernetes.core.k8s:
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: mattermost-mattermost-team-edition
            namespace: mattermost
            annotations:
              kubernetes.io/ingress.class: public
              nginx.ingress.kubernetes.io/proxy-body-size: "0"
              nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
              nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
              nginx.ingress.kubernetes.io/ssl-redirect: "false"
          spec:
            ingressClassName: "public"
            rules:
            - host: "mattermost.{{ ingress_domain }}"
              http:
                paths:
                - path: /
                  pathType: ImplementationSpecific
                  backend:
                    service:
                      name: mattermost-team-edition
                      port:
                        number: 8065
        state: present
      register: mattermost_ingress_result
      
    - name: Log Mattermost ingress fix
      ansible.builtin.debug:
        msg: "Mattermost ingress fixed: {{ mattermost_ingress_result is succeeded }}"

# External access for BizObs application - ACE-BOX standard pattern
- name: Create BizObs service and endpoints first
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: bizobs-service
        namespace: default
        labels:
          app: bizobs
          component: partner-powerup
      spec:
        type: ClusterIP
        ports:
        - port: 8080
          targetPort: 8080
          protocol: TCP
          name: http
    state: present
  register: bizobs_service_result

- name: Create BizObs endpoints pointing to node localhost
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Endpoints
      metadata:
        name: bizobs-service
        namespace: default
        labels:
          app: bizobs
          component: partner-powerup
      subsets:
      - addresses:
        - ip: "{{ ansible_default_ipv4.address }}"
        ports:
        - port: 8080
          protocol: TCP
          name: http
    state: present
  register: bizobs_endpoints_result

- name: Wait for service to be ready
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    name: bizobs-service
    namespace: default
  register: service_info
  until: service_info.resources | length > 0
  retries: 10
  delay: 3

- name: Create BizObs ingress for external access
  kubernetes.core.k8s:
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: bizobs-ingress
        namespace: default
        labels:
          app: bizobs
          component: partner-powerup
        annotations:
          nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
          nginx.ingress.kubernetes.io/rewrite-target: /
      spec:
        ingressClassName: "{{ ingress_class | default('public') }}"
        rules:
        - host: "{{ bizobs_domain }}"
          http:
            paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: bizobs-service
                  port:
                    number: 8080
    state: present
  register: bizobs_ingress_result
  retries: 3
  delay: 5

- name: Verify Kubernetes resources were created
  ansible.builtin.debug:
    msg: |
      Service Created: {{ bizobs_service_result is succeeded }}
      Endpoints Created: {{ bizobs_endpoints_result is succeeded }}
      Ingress Created: {{ bizobs_ingress_result is succeeded }}
      Target IP: {{ ansible_default_ipv4.address }}
      External URL: http://{{ bizobs_domain }}/

# Configure Dashboard LAST with proper ACE-BOX role
- name: Configure Dashboard with BizObs links and OneAgent compatibility
  block:
    # Fetch dynamic Mattermost credentials from Kubernetes secrets
    - name: Get Mattermost credentials from Kubernetes secrets
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: mattermost-admin
        namespace: mattermost
      register: mattermost_secret_info
      failed_when: false
    
    - name: Set Mattermost credentials from secrets
      set_fact:
        mattermost_username: "{{ mattermost_secret_info.resources[0].data.mattermost_username | b64decode if mattermost_secret_info.resources else 'admin' }}"
        mattermost_password: "{{ mattermost_secret_info.resources[0].data.mattermost_password | b64decode if mattermost_secret_info.resources else 'admin123' }}"
      when: mattermost_secret_info.resources is defined and mattermost_secret_info.resources | length > 0
    
    - set_fact:
        include_dashboard_value_file: "{{ role_path }}/templates/bizobs-dashboard.yml.j2"

    - include_role:
        name: dashboard
        tasks_from: template-values-file

    - include_role:
        name: "dashboard"

- name: Verify Kubernetes resources were created
  ansible.builtin.debug:
    msg: |
      Service Created: {{ bizobs_service_result is succeeded }}
      Endpoints Created: {{ bizobs_endpoints_result is succeeded }}
      Ingress Created: {{ bizobs_ingress_result is succeeded }}
      Target IP: {{ ansible_default_ipv4.address }}
      External URL: http://{{ bizobs_domain }}/

- name: Final deployment status
  ansible.builtin.debug:
    msg: |
      🎉 Partner PowerUp BizObs deployed successfully with ACE-BOX standards!
      
      � Deployment Order Completed:
      1. ✅ Dynatrace OneAgent & Monaco Config
      2. {{ '✅' if bizflow_installed | default(false) else '⚠️' }} BizFlow App ({{ 'installed' if bizflow_installed | default(false) else 'failed - using Monaco events' }})  
      3. ✅ BizObs Application (verified healthy)
      4. ✅ Mattermost Collaboration
      5. ✅ Kubernetes Service & Ingress
      6. ✅ Dashboard (with all service links)
      
      🔗 Access URLs:
      - Dashboard: http://dashboard.{{ ingress_domain }}/ (📊 Central hub with all links)
      - BizObs App: http://{{ bizobs_domain }}/
      - Mattermost: http://mattermost.{{ ingress_domain }}/
      - Dynatrace: {{ extra_vars.dt_environment_url_gen3.rstrip('/') }}
      {{ '- BizFlow App: Available in Dynatrace Platform' if bizflow_installed | default(false) else '' }}
      
      🎯 BizObs Features Ready:
      - Customer Journey Simulation: http://{{ bizobs_domain }}/api/journey-simulation/simulate-journey
      - Admin Panel: http://{{ bizobs_domain }}/api/admin/services/status
      - Health Check: http://{{ bizobs_domain }}/health
      - Load Generation: Multi-persona simulation (Karen, Raj, Alex, Sophia)
      {{ '- BizFlow Workflows: Available via Dynatrace Platform' if bizflow_installed | default(false) else '- Business Events: Available via Monaco configuration' }}
      
      🎭 Demo Scenarios:
      - Insurance: PolicyDiscovery → QuoteGeneration → PaymentProcessing
      - Retail: ProductBrowsing → CartManagement → CheckoutProcess
      - Tech: UserOnboarding → FeatureExploration → DataProcessing
      - Banking: AccountCreation → KYCVerification → TransactionProcessing
      
      🚀 Ready for Dynatrace Business Observability demos!
      
      ✅ ACE-BOX Deployment Summary:
      - Health Check: {{ health_check.status }}
      - BizFlow App: {{ 'Installed' if bizflow_installed | default(false) else 'Failed (fallback to Monaco)' }}
      - Service Created: {{ bizobs_service_result is succeeded }}
      - Endpoints Created: {{ bizobs_endpoints_result is succeeded }}
      - Ingress Created: {{ bizobs_ingress_result is succeeded }}
      - Dashboard: {{ '✅ Healthy & Accessible' if dashboard_healthy | default(false) else '⚠️ Issues detected (auto-recovery attempted)' }}
      - Ingress Class: {{ ingress_class | default('public') }} (ACE-BOX standard)
      - Automation: Fully automated - {{ 'no manual steps required!' if dashboard_healthy | default(false) else 'dashboard may need manual review' }}
      
      💡 Note: Dashboard deployed last to include all service URLs

# Configure public access for dashboard and services with health checks
- name: Configure public access and ensure dashboard health
  block:
    - name: Exclude dashboard from OneAgent instrumentation to prevent Node.js conflicts
      shell: |
        kubectl patch deployment dashboard -n ace --type='json' -p='[
          {
            "op": "add",
            "path": "/spec/template/metadata/annotations",
            "value": {
              "oneagent.dynatrace.com/inject": "false",
              "dynatrace.com/inject": "false"
            }
          },
          {
            "op": "add",
            "path": "/spec/template/spec/containers/0/env/-",
            "value": {
              "name": "DT_INJECT_ONEAGENT",
              "value": "false"
            }
          },
          {
            "op": "add", 
            "path": "/spec/template/spec/containers/0/env/-",
            "value": {
              "name": "DT_DISABLE_ONEAGENT",
              "value": "true"
            }
          }
        ]' || true
      register: dashboard_oneagent_exclusion
      failed_when: false
      
    - name: Wait for dashboard deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: dashboard
        namespace: ace
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300
      register: dashboard_deployment_status
      failed_when: false
      
    - name: Check dashboard pod status
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: ace
        label_selectors:
          - app=dashboard
      register: dashboard_pods
      
    - name: Restart dashboard if pods are not running
      kubernetes.core.k8s:
        api_version: apps/v1
        kind: Deployment
        name: dashboard
        namespace: ace
        state: present
        definition:
          spec:
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/restartedAt: "{{ ansible_date_time.iso8601 }}"
      when: dashboard_pods.resources | length == 0 or (dashboard_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length == 0)
      register: dashboard_restart
      
    - name: Wait for dashboard pods to be running after restart
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: ace
        label_selectors:
          - app=dashboard
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 120
      when: dashboard_restart is changed
      
    - name: Verify dashboard service is accessible
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: dashboard
        namespace: ace
      register: dashboard_service
      
    - name: Test dashboard service endpoint
      uri:
        url: "http://{{ dashboard_service.resources[0].spec.clusterIP }}:{{ dashboard_service.resources[0].spec.ports[0].port }}"
        method: GET
        timeout: 30
      register: dashboard_health_test
      failed_when: false
      retries: 5
      delay: 10
      when: dashboard_service.resources | length > 0
      
    - name: Force recreate dashboard service if unhealthy
      block:
        - name: Delete existing dashboard service
          kubernetes.core.k8s:
            api_version: v1
            kind: Service
            name: dashboard
            namespace: ace
            state: absent
            
        - name: Wait for service deletion
          pause:
            seconds: 10
            
        - name: Recreate dashboard service
          kubernetes.core.k8s:
            api_version: v1
            kind: Service
            name: dashboard
            namespace: ace
            state: present
            definition:
              metadata:
                name: dashboard
                namespace: ace
                labels:
                  app: dashboard
              spec:
                selector:
                  app: dashboard
                ports:
                - port: 80
                  targetPort: 8080
                  protocol: TCP
                type: ClusterIP
      when: dashboard_health_test is defined and dashboard_health_test.status != 200
      
    - name: Remove dashboard basic authentication for public access
      shell: |
        kubectl patch ingress ace-dashboard -n ace --type='json' -p='[
          {"op": "remove", "path": "/metadata/annotations/nginx.ingress.kubernetes.io~1auth-realm"},
          {"op": "remove", "path": "/metadata/annotations/nginx.ingress.kubernetes.io~1auth-secret"},
          {"op": "remove", "path": "/metadata/annotations/nginx.ingress.kubernetes.io~1auth-type"}
        ]' || true
      register: dashboard_auth_removal
      failed_when: false
      
    - name: Verify dashboard ingress configuration
      kubernetes.core.k8s_info:
        api_version: networking.k8s.io/v1
        kind: Ingress
        name: ace-dashboard
        namespace: ace
      register: dashboard_ingress
      
    - name: Test external dashboard access
      uri:
        url: "https://dashboard.{{ ingress_domain }}"
        method: GET
        timeout: 30
        validate_certs: false
      register: external_dashboard_test
      failed_when: false
      retries: 3
      delay: 10
      
    - name: Log dashboard status and accessibility
      ansible.builtin.debug:
        msg: |
          Dashboard Health Check Results:
          - OneAgent Exclusion: {{ dashboard_oneagent_exclusion.rc == 0 }}
          - Deployment Ready: {{ dashboard_deployment_status is succeeded }}
          - Pods Running: {{ (dashboard_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length) > 0 }}
          - Service Accessible: {{ dashboard_health_test.status | default('Unknown') == 200 }}
          - Authentication Removed: {{ dashboard_auth_removal.rc == 0 }}
          - External Access: {{ external_dashboard_test.status | default('Failed') }}
          - Dashboard URL: https://dashboard.{{ ingress_domain }}
          
          💡 OneAgent disabled for dashboard to prevent Next.js module conflicts
          
    - name: Set dashboard health status
      set_fact:
        dashboard_healthy: "{{ (dashboard_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length) > 0 and (dashboard_health_test.status | default(0) == 200) }}"
