#
# Partner PowerUp BizObs - ACE-BOX External Use Case
# Main deployment tasks for my-use-case role
# 
---
- debug:
    msg: "Hello from Partner PowerUp BizObs Use Case!"

# Store role path for file references
- set_fact:
    role_path_abs: "{{ role_path }}"

# 
# STEP 1: Authentication & Dynatrace Setup
# dt-access-token is a curated role for Dynatrace API access
# Required for Monaco configuration management
#
- include_role:
    name: dt-access-token
  vars:
    access_token_var_name: "monaco_cleanup_api_token"
    access_token_scope:
      [
        "slo.read",
        "slo.write", 
        "CaptureRequestData",
        "credentialVault.read",
        "credentialVault.write",
        "DataExport",
        "DataPrivacy",
        "ExternalSyntheticIntegration",
        "ReadConfig",
        "WriteConfig",
        "events.ingest",
        "settings.read",
        "settings.write",
        "metrics.ingest",
        "openTelemetryTrace.ingest",
        "logs.ingest"
      ]

# Generate OAuth Token (exactly as in working implementation)
- block:
    - name: Request a DT OAuth Access Token
      ansible.builtin.uri:
        url: "{{ extra_vars.dt_oauth_sso_endpoint }}"
        method: POST
        headers:
          Content-Type: "application/x-www-form-urlencoded"
        body_format: form-urlencoded
        body:
          grant_type: "client_credentials"
          client_id: "{{ extra_vars.dt_oauth_client_id }}"
          client_secret: "{{ extra_vars.dt_oauth_client_secret }}"
          scope: "document:documents:read document:documents:write document:direct-shares:read document:direct-shares:write"
          resource: "{{ extra_vars.dt_oauth_account_urn }}"
      register: auth_response_raw
      failed_when: auth_response_raw.status != 200
      when: 
        - extra_vars.dt_oauth_client_id is defined
        - extra_vars.dt_oauth_client_secret is defined
        - extra_vars.dt_oauth_sso_endpoint is defined

    - name: Set OAuth Access Token
      set_fact:
        dt_oauth_access_token: "{{ auth_response_raw.json.access_token }}"
      when: auth_response_raw is defined and auth_response_raw.status == 200

# Install Biz Flow App using dt-platform role
- name: Install Biz Flow App
  ignore_errors: true
  include_role:
    name: dt-platform
    tasks_from: ensure-app
  vars:
    dt_app_id: "dynatrace.biz.flow"
    dt_app_version: "1.20.3"
    dt_environment_url_gen3: "{{ extra_vars.dt_environment_url_gen3 }}"
    dt_oauth_sso_endpoint: "{{ extra_vars.dt_oauth_sso_endpoint }}"
    dt_oauth_client_id: "{{ extra_vars.dt_oauth_client_id }}"
    dt_oauth_client_secret: "{{ extra_vars.dt_oauth_client_secret }}"
    dt_oauth_account_urn: "{{ extra_vars.dt_oauth_account_urn }}"
  when: 
    - extra_vars.dt_environment_url_gen3 is defined
    - extra_vars.dt_oauth_client_id is defined

#
# STEP 2: Infrastructure Setup
# Kubernetes infrastructure is required for Mattermost and Dashboard
#
- include_role:
    name: "microk8s"

#
# STEP 3: Monaco Configuration (requires auth tokens)
# Apply Monaco configuration for Dynatrace setup
#
- include_role:
    name: "monaco-v2"

- include_role:
    name: monaco-v2
    tasks_from: apply-monaco
    apply:
      environment:
        DT_API_TOKEN: "{{ dynatrace_api_token }}"
        DT_PLATFORM_TENANT_URL: "{{ extra_vars.dt_environment_url_gen3.rstrip('/') if extra_vars.dt_environment_url_gen3 is defined else '' }}"
        DT_OAUTH_CLIENT_ID: "{{ extra_vars.dt_oauth_client_id | default('') }}"
        DT_OAUTH_CLIENT_SECRET: "{{ extra_vars.dt_oauth_client_secret | default('') }}"
        DT_OAUTH_SSO_ENDPOINT: "{{ extra_vars.dt_oauth_sso_endpoint | default('') }}"
        INGRESS_DOMAIN: "{{ ingress_domain }}"
  vars:
    monaco_projects_root: "{{ role_path_abs }}/files/monaco"
    monaco_project: ""
    monaco_manifest_path: "{{ role_path_abs }}/files/monaco/manifest.yml"

#
# STEP 4: Mattermost (requires Kubernetes)
# Team collaboration platform
#
- include_role:
    name: "mattermost"

#
# STEP 5: OneAgent (after Kubernetes is ready)
# Dynatrace observability agent
#
- include_role:
    name: "dt-oneagent-classic"

#
# STEP 6: BizObs Application (runs on EC2, uses ingress for external access)
# This is the main Partner PowerUp BizObs application
#
- include_role:
    name: "app-partner-powerup-bizobs"

#
# STEP 7: Dashboard Setup (requires Kubernetes and BizObs to be running)
# Configure dashboard with links to all services
#
- name: Configure Dashboard with BizObs links
  block:
    - set_fact:
        include_dashboard_value_file: "{{ role_path_abs }}/templates/bizobs-dashboard.yml.j2"

    - include_role:
        name: dashboard
        tasks_from: template-values-file

    - include_role:
        name: "dashboard"

# Final status with all access URLs
- debug:
    msg: |
      ðŸŽ‰ Partner PowerUp BizObs deployed successfully!
      
      ðŸ“Š DASHBOARD & COLLABORATION:
      - Dashboard: {{ ingress_protocol | default('http') }}://dashboard.{{ ingress_domain }}/
      - Mattermost: {{ ingress_protocol | default('http') }}://mattermost.{{ ingress_domain }}/
      
      ðŸš€ BIZOBS APPLICATION:
      - Main App: {{ ingress_protocol | default('http') }}://bizobs.{{ ingress_domain }}/
      - Health Check: {{ ingress_protocol | default('http') }}://bizobs.{{ ingress_domain }}/health
      - Admin Panel: {{ ingress_protocol | default('http') }}://bizobs.{{ ingress_domain }}/api/admin/services/status
      - Journey Simulation: {{ ingress_protocol | default('http') }}://bizobs.{{ ingress_domain }}/api/journey-simulation/simulate-journey
      - Load Generation: {{ ingress_protocol | default('http') }}://bizobs.{{ ingress_domain }}/api/load-gen/start
      
      ðŸ”§ DYNATRACE INTEGRATION:
      - Tenant: {{ extra_vars.dt_environment_url_gen3 if extra_vars.dt_environment_url_gen3 is defined else 'Configured via environment' }}
      - OneAgent: Installed and monitoring
      - Biz Flow App: Installed
      - Monaco Config: Applied
      
      ðŸŽ­ DEMO FEATURES READY:
      - Customer Journey Simulation (Insurance, Retail, Tech, Banking)
      - Multi-persona Load Generation (Karen, Raj, Alex, Sophia)  
      - Dynatrace Integration with Business Events
      - Real-time Observability Dashboard
      - Service Mesh with Dynamic Service Creation
      Sudo configuration: {{ 'SUCCESS - Passwordless sudo configured' if sudo_test.stdout == 'root' else 'WARNING - May need manual intervention' }}
      Sudo test result: {{ sudo_test.stdout }}
      {% if sudo_test.stdout != 'root' %}
      If deployment fails with permission errors, run manually:
      echo 'dt_training ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/dt_training
      {% endif %}

- include_role:
    name: dt-access-token
  vars:
    access_token_var_name: "monaco_cleanup_api_token"
    access_token_scope:
      [
        "slo.read",
        "slo.write",
        "CaptureRequestData",
        "credentialVault.read",
        "credentialVault.write",
        "DataExport",
        "DataPrivacy",
        "ExternalSyntheticIntegration",
        "ReadConfig",
        "WriteConfig",
        "events.ingest",
        "settings.read",
        "settings.write",
        "metrics.ingest",
        "openTelemetryTrace.ingest",
        "logs.ingest"
      ]

# Generate OAuth Token
- block:
    - name: Validate required variables for OAuth
      fail:
        msg: "Required variables (dt_oauth_client_id, dt_oauth_client_secret, dt_oauth_sso_endpoint, dt_environment_url_gen3) are missing."
      when:
        - extra_vars.dt_oauth_client_id is not defined
        - extra_vars.dt_oauth_client_secret is not defined
        - extra_vars.dt_oauth_sso_endpoint is not defined
        - extra_vars.dt_environment_url_gen3 is not defined

    - name: Debug OAuth Configuration
      debug:
        msg: |
          DT_OAUTH_CLIENT_ID: {{ extra_vars.dt_oauth_client_id }}
          DT_OAUTH_CLIENT_SECRET: {{ extra_vars.dt_oauth_client_secret }}
          DT_OAUTH_SSO_ENDPOINT: {{ extra_vars.dt_oauth_sso_endpoint }}
          Resource: {{ extra_vars.dt_oauth_account_urn }}

    - name: Request a DT OAuth Access Token
      ansible.builtin.uri:
        url: "{{ extra_vars.dt_oauth_sso_endpoint }}"
        method: POST
        headers:
          Content-Type: "application/x-www-form-urlencoded"
        body_format: form-urlencoded
        body:
          grant_type: "client_credentials"
          client_id: "{{ extra_vars.dt_oauth_client_id }}"
          client_secret: "{{ extra_vars.dt_oauth_client_secret }}"
          scope: "document:documents:read document:documents:write document:direct-shares:read document:direct-shares:write"
          resource: "{{ extra_vars.dt_oauth_account_urn }}"
      register: auth_response_raw
      failed_when:
        - auth_response_raw.status != 200
      changed_when:
        - auth_response_raw.status == 200

    - name: Set OAuth Access Token
      set_fact:
        dt_oauth_access_token: "{{ auth_response_raw.json.access_token }}"

# Install Biz Flow App
- name: Install Biz Flow App
  ignore_errors: true
  include_role:
    name: dt-platform
    tasks_from: ensure-app
  vars:
    dt_app_id: "{{ item.dt_app_id }}"
    dt_app_version: "{{ item.dt_app_version }}"
    dt_environment_url_gen3: "{{ extra_vars.dt_environment_url_gen3 }}"
    dt_oauth_sso_endpoint: "{{ extra_vars.dt_oauth_sso_endpoint }}"
    dt_oauth_client_id: "{{ extra_vars.dt_oauth_client_id }}"
    dt_oauth_client_secret: "{{ extra_vars.dt_oauth_client_secret }}"
    dt_oauth_account_urn: "{{ extra_vars.dt_oauth_account_urn }}"
  loop:
    - dt_app_id: "dynatrace.biz.flow"
      dt_app_version: "1.20.3"

- include_role:
    name: monaco-v2

- include_role:
    name: monaco-v2
    tasks_from: apply-monaco
    apply:
      environment:
        DT_API_TOKEN: "{{ dynatrace_api_token }}"
        DT_PLATFORM_TENANT_URL: "{{ extra_vars.dt_environment_url_gen3.rstrip('/') }}"
        DT_OAUTH_CLIENT_ID: "{{ extra_vars.dt_oauth_client_id }}"
        DT_OAUTH_CLIENT_SECRET: "{{ extra_vars.dt_oauth_client_secret }}"
        DT_OAUTH_SSO_ENDPOINT: "{{ extra_vars.dt_oauth_sso_endpoint }}"
        INGRESS_DOMAIN: "{{ ingress_domain }}"
  vars:
    monaco_projects_root: "{{ role_path_abs }}/files/monaco"
    monaco_project: "" # selection of projects or all projects under the root path if set empty
    monaco_manifest_path: "{{ role_path_abs }}/files/monaco/manifest.yml"
    monaco_environment:
      DT_API_TOKEN: "{{ dynatrace_api_token }}"
      DT_PLATFORM_TENANT_URL: "{{ extra_vars.dt_environment_url_gen3.rstrip('/') }}"
      DT_OAUTH_CLIENT_ID: "{{ extra_vars.dt_oauth_client_id }}"
      DT_OAUTH_CLIENT_SECRET: "{{ extra_vars.dt_oauth_client_secret }}"
      DT_OAUTH_SSO_ENDPOINT: "{{ extra_vars.dt_oauth_sso_endpoint }}"

# Install Kubernetes infrastructure first
- include_role:
    name: k3s

# Install Helm for Kubernetes package management (using ACE Box official method)
- name: Download Helm binary
  become: true
  become_user: root
  ansible.builtin.get_url:
    url: "https://get.helm.sh/helm-v{{ helm_version | default('3.19.0') }}-linux-amd64.tar.gz"
    dest: "/tmp/helm-v{{ helm_version | default('3.19.0') }}-linux-amd64.tar.gz"
    mode: '0644'

- name: Extract Helm binary
  become: true
  become_user: root
  ansible.builtin.unarchive:
    src: "/tmp/helm-v{{ helm_version | default('3.19.0') }}-linux-amd64.tar.gz"
    dest: "/tmp/"
    remote_src: yes

- name: Move Helm binary to /usr/local/bin
  become: true
  become_user: root
  ansible.builtin.copy:
    src: "/tmp/linux-amd64/helm"
    dest: "/usr/local/bin/helm"
    mode: '0755'
    owner: root
    group: root
    remote_src: true

- name: Remove Helm temp files
  become: true
  become_user: root
  ansible.builtin.file:
    path: "/tmp/helm-v{{ helm_version | default('3.19.0') }}-linux-amd64.tar.gz"
    state: absent
  ignore_errors: yes

- name: Remove Helm extracted directory
  become: true
  become_user: root
  ansible.builtin.file:
    path: "/tmp/linux-amd64"
    state: absent
  ignore_errors: yes

- name: Verify Helm installation
  ansible.builtin.command: helm version --short
  register: helm_version_output

- name: Display Helm version
  debug:
    msg: "Helm installed successfully: {{ helm_version_output.stdout }}"

- include_role:
    name: mattermost

# Install OneAgent after Kubernetes is ready
- include_role:
    name: dt-oneagent-classic

# Partner PowerUp BizObs App - Native EC2 Deployment (No Kubernetes needed)
- include_role:
    name: app-partner-powerup-bizobs

# Apply BizObs Dashboard Configuration (Dashboard runs in K8s)
- name: Add BizObs Dashboard Configuration
  block:
  - set_fact:
      include_dashboard_value_file: "{{ role_path_abs }}/templates/bizobs-dashboard.yml.j2"

  - include_role:
      name: dashboard
      tasks_from: template-values-file

# Deploy dashboard after BizObs configuration is ready (Dashboard runs in K8s)
- include_role:
    name: dashboard

# Wait for dashboard to be ready
- name: Wait for dashboard to be ready
  wait_for:
    host: localhost
    port: 80
    delay: 10
    timeout: 120
  failed_when: false

- name: Check dashboard deployment status
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: ace
    label_selectors:
      - "app.kubernetes.io/name=dashboard"
  register: dashboard_pods
  failed_when: false

- name: Display dashboard status
  debug:
    msg: |
      Dashboard deployment status:
      Dashboard URL: https://dashboard.{{ ingress_domain }}
      Dashboard pods: {{ dashboard_pods.resources | length if dashboard_pods.resources is defined else 'Not found' }}
      {% if dashboard_pods.resources is defined and dashboard_pods.resources | length > 0 %}
      Pod status: {{ dashboard_pods.resources[0].status.phase if dashboard_pods.resources[0].status is defined else 'Unknown' }}
      {% endif %}

# Partner PowerUp BizObs App - Start Application and Setup Ingress
- name: Start Application
  ansible.builtin.shell: /bin/sh "{{ bizobs_home | default('/opt/bizobs') }}/Partner-PowerUp-BizObs-App/start-server.sh"
  become: true
  args:
    chdir: "{{ bizobs_home | default('/opt/bizobs') }}/Partner-PowerUp-BizObs-App"
  register: bizobs_start_result
  failed_when: false  # Don't fail immediately, let's check the result

- name: Display BizObs startup result
  debug:
    msg: "BizObs startup result: {{ bizobs_start_result }}"

- name: Wait for BizObs application to be ready
  wait_for:
    port: 8080
    host: localhost
    delay: 10
    timeout: 180  # Increased timeout
  register: port_check
  failed_when: false

- name: Check if BizObs is running via HTTP
  ansible.builtin.uri:
    url: http://localhost:8080/health
    method: GET
  register: health_check
  failed_when: false
  when: port_check is succeeded

- name: Display health check result
  debug:
    msg: "Health check result: {{ health_check }}"
  when: health_check is defined

- name: Create BizObs Service
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: bizobs-service
        namespace: default
      spec:
        type: ExternalName
        externalName: "{{ ansible_default_ipv4.address }}"
        ports:
        - protocol: TCP
          port: 80
          targetPort: 8080
  when: port_check is succeeded

- name: Create BizObs Ingress
  kubernetes.core.k8s:
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: bizobs-ingress
        namespace: default
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
          nginx.ingress.kubernetes.io/upstream-vhost: "{{ ansible_default_ipv4.address }}:8080"
      spec:
        ingressClassName: "{{ ingress_class }}"
        rules:
        - host: "bizobs.{{ ingress_domain }}"
          http:
            paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: bizobs-service
                  port:
                    number: 80
  when: port_check is succeeded and health_check is succeeded

# Final deployment status
- name: Display final deployment status
  debug:
    msg: |
      ðŸŽ‰ Partner PowerUp BizObs Deployment Status:
      
      âœ… Dashboard URL: https://dashboard.{{ ingress_domain }}
      âœ… Dashboard Username: dt_training  
      âœ… Dashboard Password: {{ ansible_env.ACE_BOX_DASHBOARD_PASSWORD | default('Check logs for password') }}
      
      âœ… BizObs Application URL: {{ ingress_protocol | default('http') }}://bizobs.{{ ingress_domain }}
      âœ… BizObs Health Check: {{ ingress_protocol | default('http') }}://bizobs.{{ ingress_domain }}/health
      
      ðŸ“Š Business Analytics Features:
      - Customer Journey Simulation
      - Dynamic Microservices (Step1-Step6)
      - Industry-Specific Templates  
      - Real-time Business Analytics
      - Dynatrace Integration
      
      ðŸ”§ Troubleshooting:
      - If dashboard shows 404, wait 2-3 minutes for full deployment
      - Check pod status: kubectl get pods -n ace
      - Check ingress: kubectl get ingress -A
