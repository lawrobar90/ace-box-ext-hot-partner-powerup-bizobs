[{"id":"1","name":"Introduction \r","content":"<h2 id=\"introduction\">Introduction</h2>\n<p>In this session, you will learn how to:   </p>\n<ul>\n<li><p><strong>Identify</strong> and <strong>assess</strong> <strong>sources</strong> for collecting business-relevant data.   </p></li>\n<li><p><strong>Translate business requirements</strong> into effective Dynatrace configurations.   </p></li>\n<li><p><strong>Create impactful visualizations</strong> using DQL and Notebooks to gain insights from business data.   </p></li>\n<li><p><strong>Design foundational business process automation</strong> workflows with Workflows.   </p></li>\n<li><p><strong>Harness the power of business data</strong> to drive better outcomes and streamline processes with Dynatrace Business Events and Analytics. </p></li>\n</ul>","activityList":[]},{"id":"2","name":"Verify Set-Up\r","content":"<h2 id=\"verifysetup\">Verify Set-Up</h2>\n<p>Before we begin, let's verify that you can access the application. </p>\n<ol>\n<li><em>Access</em> <strong>Dynatrace University</strong> <ul>\n<li><em>Open</em> <a href=\"university.dynatrace.com\"><strong>university.dynatrace.com</strong></a></li>\n<li><em>Log in</em> with your <strong>account credentials</strong> </li>\n<li><em>Open</em> the <strong>Business Analytics event</strong> in the section <strong>Upcoming events</strong> </li></ul></li>\n<li><em>Verify</em> <strong>environment</strong> <ul>\n<li><em>Verify</em> <strong>access</strong> to the Dynatrace Environment </li></ul></li>\n<li>About the demo application <ul>\n<li><strong>easyTrade</strong> simulates a trading application, so here are some things you can do in the app: <ul>\n<li><strong>Deposit</strong> and <strong>withdraw</strong> money </li>\n<li><strong>Buy</strong> and <strong>sell</strong> assets </li>\n<li>View a <strong>basic dashboard</strong> about your trading</li></ul></li>\n<li>Make sure you can access your EasyTrade app by:  </li></ul><ol>\n<li><em>Clicking</em> on <strong>EasyTrade</strong> link inside your terminal </li>\n<li><em>Click</em> \"<strong>LOG IN AS JAMES</strong>\"  </li>\n<li><em>Click</em> \"<strong>instruments</strong>\"  </li>\n<li><em>Pick</em> a <strong>stock</strong> </li>\n<li><em>Choose</em> \"<strong>BUY</strong>\" instead of \"<strong>QUICK BUY</strong>\" </li>\n<li><em>Fill in</em> the \"<strong>Amount</strong>\" field with <strong>any number</strong> </li>\n<li><em>Click</em> \"<strong>BUY</strong>\" </li></ol></li>\n</ol>","activityList":[]},{"id":"3","name":"Lab 1: Creating Business Rules \r","content":"<h2 id=\"lab1creatingbusinessrules\">Lab 1: Creating Business Rules</h2>\n<p>This lab will show you how to <em>create</em> and <em>validate</em> <strong>business rules</strong>. </p>\n<h3 id=\"theoryoftheconfiguration\">Theory of the Configuration</h3>\n<ul>\n<li><p><strong>Triggers</strong>: <em>Define</em> conditions to trigger <strong>business events</strong> from incoming <strong>web requests</strong>. <strong>Triggers</strong> are connected by <strong>AND</strong> logic per capture rule. If you set multiple <em>trigger rules</em>, <strong>all</strong> of them <em>need</em> to be fulfilled to <em>capture</em> a <strong>business event</strong>. (Mandatory) </p></li>\n<li><p><strong>Event Metadata</strong>: </p>\n<ul>\n<li><strong>Provider</strong>: a server, a software tool, a third-party integration (Mandatory) </li>\n<li><strong>Type</strong>: purchase, login, etc. (Mandatory) </li>\n<li><strong>Category</strong>: reference from ITIL (Optional) </li></ul></li>\n<li><p><strong>Event Data</strong>: extract data from the transaction </p></li>\n</ul>\n<h4 id=\"exampleresult\">Example Result</h4>\n<p><img src=\"assets/3632bdeeb43381886d46cd991af0c46ef79837f3ab4b794773d40f3b5488003f.png\" alt=\"picture 0\" />  </p>\n<h3 id=\"11oneagentruleconfiguration\">1.1 OneAgent rule Configuration</h3>\n<h5 id=\"configure\">Configure</h5>\n<ol>\n<li><em>Open</em> \"<strong>Settings</strong>\"</li>\n<li><em>Open</em> \"<strong>Business Analytics</strong>\" menu group</li>\n<li><em>Click</em> on \"<strong>OneAgent</strong>\"</li>\n<li><em>Click</em> on \"<strong>Add new capture rule</strong>\"</li>\n<li>For field \"<strong>Rule name</strong>\", <em>copy</em> and <em>paste</em>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">Asset purchase</span>\n</code></pre>\n<h5 id=\"configuretrigger\">Configure Trigger</h5>\n<ol>\n<li><em>Click</em> on \"<strong>Add trigger</strong>\"</li>\n<li>For \"<strong>Data source</strong>\", <em>select</em> \"<strong>Request - Path</strong>\"</li>\n<li>For \"<strong>Operator</strong>\", <em>select</em> \"<strong>equals</strong>\"</li>\n<li>For \"<strong>Value</strong>\", <em>copy</em> and <em>paste</em>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-regexp\">/broker-service/</span>v1<span class=\"hljs-regexp\">/trade/</span><span class=\"hljs-keyword\">long</span>/buy\n</code></pre>\n<h5 id=\"configuremetadataprovider\">Configure metadata (provider)</h5>\n<ol>\n<li>For \"<strong>Event provider data source</strong>\", <em>select</em> \"<strong>Fixed value</strong>\"</li>\n<li>For \"<strong>Event provider fixed value</strong>\", <em>copy</em> and <em>paste</em>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">online-website</span>\n</code></pre>\n<h5 id=\"configuremetadatatype\">Configure metadata (type)</h5>\n<ol>\n<li>For \"<strong>Event type data source</strong>\", <em>select</em> \"<strong>Fixed value</strong>\"</li>\n<li>For \"<strong>Event type fixed value</strong>\", <em>copy</em> and <em>paste</em>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">asset-purchase</span>\n</code></pre>\n<h5 id=\"configureadditionaldataprice\">Configure additional data (price)</h5>\n<ol>\n<li><em>Click</em> on \"<strong>Add data field</strong>\"</li>\n<li>For \"<strong>Data source</strong>\", make sure that \"<strong>Request - Body</strong>\" is <em>selected</em></li>\n<li>For \"<strong>Field name</strong>\" and \"<strong>Path</strong>\", <em>copy</em> and <em>paste</em>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">price</span>\n</code></pre>\n<p><strong>At the bottom of the screen, click \"Save changes\"</strong></p>\n<h3 id=\"12notebook\">1.2 Notebook</h3>\n<ol>\n<li><em>Open</em> \"<strong>Notebooks</strong>\"</li>\n<li><em>Create</em> a <strong>new notebook</strong></li>\n<li><em>Click</em> on the \"<strong>+</strong>\" to add a <strong>new section</strong></li>\n<li><em>Click</em> on \"<strong>Query Grail</strong>\"</li>\n<li>Copy and <em>paste</em> the <em>query</em>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">fetch</span> bizevents \n| <span class=\"hljs-keyword\">filter</span> event.<span class=\"hljs-keyword\">type</span>==&quot;asset-purchase&quot;\n</code></pre>\n<h3 id=\"13processingruleconfiguration\">1.3 Processing Rule Configuration</h3>\n<ol>\n<li><em>Open</em> \"<strong>Settings</strong>\"</li>\n<li><em>Click</em> on \"<strong>Business Analytics</strong>\" menu group</li>\n<li><em>Click</em> on “<strong>Processing</strong>”</li>\n<li><em>Click</em> on \"<strong>Add rule</strong>\"</li>\n<li>For \"<strong>Rule name</strong>\", <em>copy</em> and <em>paste</em>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">Calculate revenue</span>\n</code></pre>\n<ol start=\"6\">\n<li>For \"<strong>Matcher (DQL)</strong>\", <em>copy</em> and <em>paste</em>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-attr\">event.type</span>==<span class=\"hljs-string\">&quot;asset-purchase&quot;</span>\n</code></pre>\n<h5 id=\"fields11\">Fields 1.1</h5>\n<ol>\n<li>Under \"<strong>Transformation fields</strong>\", <em>click</em> on \"<strong>Add item</strong>\"</li>\n<li>For \"<strong>Type</strong>\", <em>select</em> \"<strong>double</strong>\"</li>\n<li>For \"<strong>Name</strong>\", <em>copy</em> and <em>paste</em>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">price</span>\n</code></pre>\n<h5 id=\"fields12\">Fields 1.2</h5>\n<ol>\n<li>Under \"<strong>Transformation fields</strong>\", <em>click</em> on \"<strong>Add item</strong>\"</li>\n<li>For \"<strong>Type</strong>\", <em>select</em> \"<strong>double</strong>\"</li>\n<li>For \"<strong>Name</strong>\", <em>copy</em> and <em>paste</em>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">amount</span>\n</code></pre>\n<h5 id=\"processordefinition\"><strong>Processor definition</strong></h5>\n<ol>\n<li>For \"<strong>Processor definition</strong>\", <em>copy</em> and <em>paste</em>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-constructor\">FIELDS_ADD(<span class=\"hljs-params\">trading_volume</span>:<span class=\"hljs-params\">price</span><span class=\"hljs-operator\">*</span><span class=\"hljs-params\">amount</span>)</span>\n</code></pre>\n<p><strong>At the bottom of the screen, <em>click</em> \"Save changes\"</strong></p>\n<h3 id=\"14bucketassignmentruleconfiguration\">1.4 Bucket Assignment Rule Configuration</h3>\n<ol>\n<li><em>Open</em> \"<strong>Settings</strong>\"</li>\n<li><em>Click</em> on \"<strong>Business Analytics</strong>\" menu group</li>\n<li><em>Click</em> on \"<strong>Bucket assignment</strong>\"</li>\n<li><em>Click</em> on \"<strong>Add rule</strong>\"</li>\n<li>For \"<strong>Rule name</strong>\", <em>copy</em> and <em>paste</em>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">Asset Purchase</span>\n</code></pre>\n<ol start=\"6\">\n<li>For \"<strong>Bucket</strong>\", <em>select</em> \"<strong>Business events (35 days) (default_bizevents)</strong>\"</li>\n<li>For \"<strong>Matcher (DQL)</strong>\", <em>copy</em> and <em>paste</em>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-attr\">event.type</span>==<span class=\"hljs-string\">&quot;asset-purchase&quot;</span>\n</code></pre>\n<p><strong>At the bottom of the screen, <em>click</em> \"Save changes\"</strong></p>\n<h3 id=\"15metricextractionruleconfiguration\">1.5 Metric Extraction Rule Configuration</h3>\n<ol>\n<li>Open \"<strong>Settings</strong>\"</li>\n<li><em>Click</em> on \"<strong>Business Analytics</strong>\" menu group</li>\n<li><em>Click</em> on \"<strong>Metric extraction</strong>\"</li>\n<li><em>Click</em> on \"<strong>Add business event metric</strong>\"</li>\n<li>For \"<strong>Key</strong>\", <em>copy</em> and <em>paste</em>:</li>\n</ol>\n<pre><code class=\"hljs\">bizevents<span class=\"hljs-selector-class\">.easytrade</span><span class=\"hljs-selector-class\">.trading_volume</span>\n</code></pre>\n<ol start=\"6\">\n<li>For \"<strong>Matcher (DQL)</strong>\", <em>copy</em> and <em>paste</em>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-attr\">event.type</span>==<span class=\"hljs-string\">&quot;asset-purchase&quot;</span>\n</code></pre>\n<ol start=\"7\">\n<li>For \"<strong>Measure</strong>\", <em>select</em> \"<strong>Attribute value</strong>\"</li>\n<li>For \"<strong>Attribute</strong>\", <em>copy</em> and <em>paste</em>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">trading_volume</span>\n</code></pre>\n<p><strong>At the bottom of the screen, <em>click</em> \"Save changes\"</strong></p>\n<h3 id=\"16queries\">1.6 Queries</h3>\n<h5 id=\"validatenewattribute\">Validate new attribute</h5>\n<ol>\n<li>From the menu, <em>open</em> \"<strong>Notebooks</strong>\"</li>\n<li><em>Click</em> on the \"<strong>+</strong>\" to add a new section</li>\n<li><em>Click</em> on \"<strong>Query Grail</strong>\"</li>\n<li><em>Copy</em> and <em>paste</em> the <strong>query</strong>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">fetch</span> bizevents \n| <span class=\"hljs-keyword\">filter</span> event.<span class=\"hljs-keyword\">type</span> == &quot;asset-purchase&quot;\n| fields price, amount, trading_volume\n</code></pre>\n<h5 id=\"validatemetric\">Validate metric</h5>\n<ol>\n<li><em>Click</em> on the \"<strong>+</strong>\" to add a new section</li>\n<li><em>Click</em> on \"<strong>Query Grail</strong>\"</li>\n<li><em>Copy</em> and <em>paste</em> the <strong>query</strong>:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-variable\">timeseries</span> <span class=\"hljs-function\"><span class=\"hljs-title\">avg</span>(<span class=\"hljs-variable\">bizevents.easytrade.trading_volume</span>)</span>\n</code></pre>\n<ol start=\"4\">\n<li><em>Click</em> on \"<strong>Run query</strong>\"</li>\n<li><em>Wait</em> for the <strong>first data points</strong> to appear</li>\n</ol>","activityList":[]},{"id":"4","name":"Lab 2: Configuring Event Ingestion    \r","content":"<h2 id=\"lab2configuringeventingestion\">Lab 2: Configuring Event Ingestion</h2>\n<p>This lab will show you how to configure event ingestion.</p>\n<h3 id=\"21importworkflow\">2.1 Import Workflow</h3>\n<ol>\n<li><em>Download</em> the <strong>workflow file</strong> and <em>import</em> it to the Environment<ul>\n<li><em>Open</em> <strong>Workflows app</strong></li>\n<li><em>Click</em> <strong>Upload</strong></li></ul></li>\n<li><em>Create</em> an <strong>access token</strong><ul>\n<li><em>Open</em> the <strong>Access Token</strong> page</li>\n<li><em>Create</em> a token with “Ingest bizevents” permission</li>\n<li>Make sure you <em>copy</em> the <strong>token value</strong></li></ul></li>\n<li><em>Edit</em> the <strong>workflow</strong><ul>\n<li><em>Open</em> the uploaded **workflow **</li>\n<li><em>Click</em> on each of the <strong>three actions</strong></li>\n<li><em>Paste</em> the <strong>token</strong> in the “<strong>Authorization</strong>” field</li></ul></li>\n<li><em>Run</em> the <strong>workflow</strong></li>\n<li><strong>Bonus</strong>: <em>edit</em> the <strong>payload</strong> to <em>include</em> <strong>different attributes</strong></li>\n</ol>\n<h3 id=\"22validateeventingestion\">2.2 Validate event ingestion</h3>\n<ol>\n<li><em>Run</em> the following <strong>query</strong>:</li>\n</ol>\n<pre><code class=\"hljs\">fetch bizevents \n| <span class=\"hljs-keyword\">filter</span> <span class=\"hljs-keyword\">event</span>.provider == <span class=\"hljs-string\">&quot;com.dynatrace.perform&quot;</span>\n</code></pre>\n<p><strong>Four events should be there</strong></p>","activityList":[]},{"id":"5","name":"Lab 3: Creating a Business Flow\r","content":"<h2 id=\"lab3creatingabusinessflow\">Lab 3: Creating a Business Flow</h2>\n<p>This lab will help you understand what business analytics is trying to achieve for an end goal.</p>\n<h3 id=\"31creatingyourbusinessflow\">3.1 Creating your Business Flow</h3>\n<ol>\n<li><em>Navigate</em> to <strong>Apps</strong></li>\n<li><em>Find</em> and <em>click</em> on <strong>Business Flow</strong></li>\n<li><em>Click</em> '<strong>+ Business Flow</strong>'</li>\n<li><em>Select</em> '<strong>Configuration</strong>' and <em>give</em> the Business Flow an <strong>identifiable name</strong></li>\n<li><em>Click</em> on <strong>Step 1</strong>, and <em>rename</em> the step to '<strong>Order Credit Card</strong>'</li>\n<li><em>Drop down</em> <strong>Events</strong>, <em>select</em> '<strong>com.easytrade.order-credit-card</strong>'</li>\n</ol>\n<h3 id=\"32addingsubsequentsteps\">3.2 Adding Subsequent Steps</h3>\n<ol>\n<li>Under the <strong>first step</strong>, <em>click</em> '<strong>+ Add Step</strong>'</li>\n<li><em>Rename</em> this step to '<strong>Credit Card manufactured</strong>'</li>\n<li><em>Drop down</em> <strong>Events</strong>, <em>select</em> '<strong>com.easytrade.update-credit-card-status.created</strong>'</li>\n<li><em>Add</em> a <strong>second Event</strong>, <em>select</em> '<strong>com.easytrade.update-credit-card-status.error</strong>', and <em>tick</em> '<strong>Business Exception</strong>'</li>\n</ol>\n<h3 id=\"33addingfinalsteps\">3.3 Adding Final Steps</h3>\n<ol>\n<li>Under the <strong>second step</strong>, <em>click</em> '<strong>+ Add Step</strong>'</li>\n<li><em>Rename</em> this step to '<strong>Credit Card shipped</strong>'</li>\n<li><em>Drop down</em> <strong>Events</strong>, <em>select</em> '<strong>com.easytrade.update-credit-card-status.shipped</strong>'</li>\n<li>Under the <strong>third step</strong>, <em>click</em> '<strong>+ Add Step</strong>'</li>\n<li><em>Rename</em> this step to '<strong>Credit Card delivered</strong>'</li>\n<li><em>Drop down</em> <strong>Events</strong>, <em>select</em> '<strong>com.easytrade.update-credit-card-status.delivered</strong>'</li>\n</ol>\n<h3 id=\"34addingconfigurationandkpis\">3.4 Adding Configuration and KPI’s</h3>\n<ol>\n<li>At the top, <em>click</em> '<strong>Settings</strong>'</li>\n<li><em>Change</em> <strong>Select event</strong> to '<strong>com.easytrade.order-credit-card</strong>'</li>\n<li><em>Change</em> <em>correrlation ID</em> to '<strong>orderId</strong>'</li>\n</ol>\n<p><strong>View the Business Flow in the instructor's environment</strong></p>","activityList":[]},{"id":"6","name":"Lab 4: Getting Value from Automation\r","content":"<h2 id=\"lab4gettingvaluefromautomation\">Lab 4: Getting Value from Automation</h2>\n<p>In this hands-on, we’ll be setting up this process using some existing building blocks! You will have access to your own <strong>Mattermost channel</strong>, so you will be able to monitor that your messages are being sent correctly.</p>\n<h3 id=\"41choosingwhenyourworkflowwillrun\">4.1 Choosing when your Workflow will run</h3>\n<ol>\n<li>Using the “<strong>App drawer</strong>” in the top-left of the screen (or the search) – <em>find</em> the <strong>“Workflow”</strong> app and <em>open</em> it.</li>\n<li><em>Choose</em> “<strong>Create a Workflow</strong>” in the top-right and you should see the view shown on the screen.</li>\n<li>The first thing to do is <em>choose</em> <strong>when this Workflow will run</strong> – for the purpose of this exercise we will <em>choose</em> the “<strong>On demand</strong>” trigger at the bottom, so it will <em>only</em> be executed when you hit “<strong>Run</strong>\".</li>\n</ol>\n<h3 id=\"42queryingthefailedorderids\">4.2 Querying the failed Order IDs</h3>\n<p>Now that we’ve set when this will run, we can start to add in the rest of the logic!</p>\n<ol>\n<li><em>Click</em> the purple “<strong>+</strong>” icon underneath your trigger and you’ll be presented with the options you see on the screen to add new logical “<strong>tasks.</strong>”</li>\n<li>First <strong>“task”</strong> will be to get the <strong>Order IDs</strong> of Customers with an issue getting their Credit Card – so we’ll <em>choose</em> the “Execute DQL Query” action which is going to look through the data for these users.</li>\n<li>The DQL query itself will look through the data for the <strong>last hour</strong> for the “<strong>CARD_ERROR</strong>” events that get created – it will then return the contextual information that let’s use take some action, for example the <strong>Order ID</strong> and the <strong>type of error</strong>.</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">fetch</span> bizevents, <span class=\"hljs-keyword\">from</span>:now()<span class=\"hljs-number\">-1</span>h\n| <span class=\"hljs-keyword\">filter</span> <span class=\"hljs-keyword\">type</span> == &quot;CARD_ERROR&quot;\n| parse details, &quot;JSON:errors&quot;\n| fields orderId, {errors[errorCode], <span class=\"hljs-keyword\">alias</span>:`Error code`}, {errors[errorType], <span class=\"hljs-keyword\">alias</span>:`Error <span class=\"hljs-keyword\">type</span>`}, {errors[errorMessage], <span class=\"hljs-keyword\">alias</span>:`Error message`}\n</code></pre>\n<h3 id=\"43formattingthedatatosend\">4.3 Formatting the data to send</h3>\n<p>Our previous step will return the <strong>“raw” data</strong> of the errors that users are facing, but because we want to send this in a <strong>Mattermost channel</strong> – we’ll apply some formatting to make it look nice!</p>\n<ol>\n<li>Use the purple “<strong>+</strong>” again to <em>add</em> another “<strong>task</strong>” and this time <em>choose</em> “<strong>Run Javascript</strong>.”</li>\n<li><em>Copy</em> over the <strong>JavaScript</strong> from the lab guide into the “<strong>input</strong>” section that’s opened up on the <strong>right-hand side</strong>. </li>\n</ol>\n<pre><code class=\"hljs JavaScript language-JavaScript\"><span class=\"hljs-comment\">// optional import of sdk modules </span>\n<span class=\"hljs-keyword\">import</span> { execution } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/automation-utils&#x27;</span>; \n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">{ execution_id }</span>) </span>{ \n<span class=\"hljs-comment\">//Enter your details here! </span>\n<span class=\"hljs-comment\">//------------------------ </span>\n<span class=\"hljs-keyword\">const</span> yourName = <span class=\"hljs-string\">&quot;Test user&quot;</span>;\n<span class=\"hljs-keyword\">const</span> dqlStepName = <span class=\"hljs-string\">&quot;execute_dql_query_1&quot;</span>; \n<span class=\"hljs-comment\">//Get the result of the previous step running DQL </span>\n<span class=\"hljs-keyword\">const</span> r = <span class=\"hljs-keyword\">await</span> \nfetch(<span class=\"hljs-string\">`/platform/automation/v1/executions/<span class=\"hljs-subst\">${execution_id}</span>/tasks/<span class=\"hljs-subst\">${dqlStepNam e}</span>/result`</span>); \n<span class=\"hljs-comment\">//Get the content being returned in a variable called &quot;body&quot; </span>\n<span class=\"hljs-keyword\">const</span> body = <span class=\"hljs-keyword\">await</span> r.json(); \n<span class=\"hljs-comment\">//Extract the list of orders affected by errors - &quot;records&quot; is the name of the list of results returned </span>\n<span class=\"hljs-keyword\">const</span> orders = body[<span class=\"hljs-string\">&quot;records&quot;</span>]; \n<span class=\"hljs-comment\">//Loop through the orders and format nicely to send to Slack </span>\n<span class=\"hljs-keyword\">var</span> niceOutput = <span class=\"hljs-string\">&quot;:warning: [&quot;</span> + yourName + <span class=\"hljs-string\">&quot;] Orders failing to update credit card: \\n&quot;</span>; \norders.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">order</span>) =&gt;</span>  niceOutput = niceOutput + <span class=\"hljs-string\">&quot;\\n&quot;</span> + <span class=\"hljs-string\">&quot;:credit_card: [*Order ID*]: &quot;</span> + order[<span class=\"hljs-string\">&#x27;orderId&#x27;</span>] + <span class=\"hljs-string\">&quot;, :1234: [*Error code*]: &quot;</span> + \norder[<span class=\"hljs-string\">&#x27;Error code&#x27;</span>] + <span class=\"hljs-string\">&quot;, :hourglass_flowing_sand: [*Error type*]: &quot;</span> + order[<span class=\"hljs-string\">&#x27;Error type&#x27;</span>] + <span class=\"hljs-string\">&quot;, :email: [*Error message*]: &quot;</span> + order[<span class=\"hljs-string\">&#x27;Error message&#x27;</span>] + <span class=\"hljs-string\">&quot;\\n&quot;</span>); \n“<span class=\"hljs-keyword\">return</span> niceOutput ; “   \n</code></pre>\n<ol start=\"3\">\n<li>Near the top is a section titled “<strong>Enter your details here!</strong>” which has 2 values.<ul>\n<li>Enter “<strong>your name</strong>”. (either your actual name or something slightly humorous) <em>This will be used at the start of the message we send to Mattermost – in a real scenario, this could be a point of contact should anyone have questions about the message.</em></li>\n<li><em>Enter</em> name of the “<strong>task</strong>” (or step) of the DWL we just added.  <em>If you didn’t change the name of that step leave it as-is, otherwise change it to the name that you have used.</em></li></ul></li>\n</ol>\n<p>At a high-level what this <strong>code</strong> is <em>doing</em> is firstly <em>getting</em> the <strong>results</strong> of the <strong>DQL</strong> from the previous step, then creating a <strong>nicely formatted message for Mattermost</strong> where each Order is listed out on a new line (and includes emojis!).</p>\n<h3 id=\"44sendingtheorderstoamattermostchannel\">4.4 Sending the orders to a Mattermost channel</h3>\n<p>The last step now is to <em>send</em> the <strong>message</strong> we’ve just created into the Mattermost channel. To make this possible we first need to create a “<strong>URL</strong>” that we can <em>send</em> the <strong>messages</strong> to via <strong>API.</strong></p>\n<ol>\n<li>Open up the <strong>ACE-box dashboard</strong> and <em>select</em> the “<strong>Links</strong>” tab – there is a “<strong>Mattermost</strong>” row here and this will give you the URL and <strong>credentials</strong> to be able to <em>login</em>.</li>\n<li>Once you’ve logged in, <em>click</em> the <strong>icon</strong> with four square in the <strong>top-left</strong> of the interface and choose <strong>Integrations</strong> &gt; <strong>Incoming Webhooks</strong>. </li>\n<li><em>Choose</em> to “<strong>Add</strong>” a new webhook, and <em>give</em> it a <strong>title</strong> </li>\n<li><em>Set</em> the channel to “<strong>Town Square</strong>”</li>\n<li><em>Hit</em> “<strong>Save</strong>,” and make a <em>copy</em> of the <strong>URL</strong> that it provides.</li>\n<li><em>Click</em> the purple “<strong>+</strong>” to add a new “<strong>task</strong>”</li>\n<li><em>Choose</em> the “<strong>HTTP</strong>\" task at the top</li>\n<li><em>Change</em> the request type to “<strong>POST</strong>” and in the “<strong>URL</strong>” box enter the URL that was just generated in Mattermost.</li>\n<li>For the <strong>body</strong> of the request, <em>enter</em> the <strong>value below</strong> so that it will send in the message we created in the JavaScript step:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"xml\">{\n  &quot;text&quot;: &quot;</span><span class=\"hljs-template-variable\">{{<span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;run_javascript_1&quot;</span>) }}</span><span class=\"xml\">&quot;\n}\n</span></code></pre>\n<ol start=\"10\">\n<li>\"<strong>Save</strong>\" your progress at the top of the screen</li>\n<li>Under “<strong>Settings</strong>” at the top, <em>enable</em> “<strong>Workflow admin</strong>.”</li>\n</ol>\n<h3 id=\"45runtheworkflow\">4.5 Run the Workflow</h3>\n<ol>\n<li><em>Hit</em> the “<strong>Run</strong>” button at the top of the screen and your Workflow should run successfully! Keep an eye on the <strong>Mattermost channel</strong> for the “<strong>name</strong>” that you entered in the JavaScript step which will indicate that your message was properly received.</li>\n</ol>","activityList":[]}]